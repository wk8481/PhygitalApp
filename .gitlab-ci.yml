# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
#include:
#  - template: SAST.gitlab-ci.yml
 
 
 
stages:
  - build
 # - deploy
 
 
image: openjdk:17-jdk-slim  # Use an OpenJDK 17 image
 
variables:
  # Define the services variables for both databases
  POSTGRES_DB_BUILD: 'postgres_phygital_db'
  POSTGRES_USER_BUILD: 'admin'
  POSTGRES_PASSWORD_BUILD: 'admin'
  POSTGRES_PORT_BUILD: '5433'
 
  POSTGRES_DB_TEST: 'phygital_test'
  POSTGRES_USER_TEST: 'admin'
  POSTGRES_PASSWORD_TEST: 'admin'
  POSTGRES_PORT_TEST: '5445'
 
  DOCKER_HUB_REPO: "zamlamb/phygital"
 
build:
  image: docker:19.03
  stage: build
  services:
    - docker:dind
  script:
    # Build the Docker image
    - cd Team_5_Phygital
    - docker build -t my-phygital-boot-app .
    - docker tag my-phygital-boot-app:latest
     $DOCKER_HUB_REPO:latest
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_HUB_REPO:latest
 
 
 
# unit-test-job:
#   image: gradle:jdk17
#   stage: test
#   services:
#     - name: postgres:16.1-alpine
#       alias: postgres_phygital_test_db
#       command: ["postgres", "-c", "max_connections=200"]
#   script:
#     - cd Team_5_Phygital
#     - ./gradlew test
#   artifacts:
#     when: always
#     paths:
#       - Team_5_Phygital/build/reports/tests/test/index.html
 
 
 
# check-files-job:  # This job runs in the test stage.
#    stage: test
#    image: alpine:latest
#    script:
#       - mkdir checkdir
#       - find -name *.c > checkdir/testresult.txt 2>/dev/null
#    artifacts:
#         paths:
#           - ./checkdir
 
# integration_test:
#   stage: test
#   image: openjdk:17
#   script:
#     - cd Team_5_Phygital
#     - ./gradlew integrationTest
 
# code_quality:
#   stage: test
#   image: gradle:latest
#   script:
#     - cd Team_5_Phygital
#     # Install any required dependencies
#     - gradle wrapper --gradle-version=8.5
#     # Run code quality checks
#     - ./gradlew checkstyle pmd findbugs
#   artifacts:
#     reports:
#       codequality: build/reports/
 
# dependency_check:
#   stage: test
#   image: openjdk:17
#   script:
#     - cd Team_5_Phygital
#     - ./gradlew dependencyCheckAnalyze
 
 
deploy:
  image: google/cloud-sdk:latest
  stage: deploy
  before_script:
     - "echo $(nslookup phygital-team5.duckdns.org | awk '/^Address: / { print $2 }') > ${HOME}/ip.txt"
     - IP_ADDRESS=$(cat ${HOME}/ip.txt)
     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
     - eval $(ssh-agent -s)
     - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
     - mkdir -p ~/.ssh
     - chmod 700 ~/.ssh
     - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config

  script:
  - ssh $TEAM5_USER@$IP_ADDRESS "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io; docker stop $APP_NAME; docker system prune -a -f; docker pull $DOCKER_REPO:$CI_COMMIT_REF_NAME; docker container run -d --name $APP_NAME -p $HTTP_PORT:8080  -e POSTGRES_USERNAME=$POSTGRES_USERNAME -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_HOST=$POSTGRES_HOST -e POSTGRES_PORT=$POSTGRES_PORT $DOCKER_REPO:$CI_COMMIT_REF_NAME; docker logoutÂ docker.io"
    