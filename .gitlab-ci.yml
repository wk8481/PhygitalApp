# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
include:
  - template: SAST.gitlab-ci.yml
 
 
 
stages:
  - build
  - test
  - deploy
  - destroy
 
 

build:
  image: gradle:jdk17
  stage: build
  script:
    - apt-get update && apt-get install -y curl gnupg
    - curl https://sdk.cloud.google.com | bash
    - exec -l $SHELL
    - gcloud components install gsutil
    - cd Team_5_Phygital
    - ./gradlew bootJar
    - echo "Copying JAR file to Google Cloud Storage bucket"
    - gsutil cp build/libs/Team_5_Phygital-0.0.1-SNAPSHOT.jar gs://jar-team-bucket/
  artifacts:
    paths:
      - Team_5_Phygital/build/libs/Team_5_Phygital-0.0.1-SNAPSHOT.jar

 
 
 
unit-test-job:
   image: gradle:jdk17
   stage: test
   script:
     - cd Team_5_Phygital 
     - cd src/main/resources  # Navigate to the resources directory
     - ls -l                   # List files in the resources directory
     - cat application.properties  # Print out the contents of application.properties file
     - cd ../../..  # Navigate back to the project root directory
     - ./gradlew test --scan 
   artifacts:
    when: always
    reports:
      junit: build/test-results/test/TEST-*.xml


 
 
 
# check-files-job:  # This job runs in the test stage.
#    stage: test
#    image: alpine:latest
#    script:
#       - mkdir checkdir
#       - find -name *.c > checkdir/testresult.txt 2>/dev/null
#    artifacts:
#         paths:
#           - ./checkdir
 
# integration_test:
#   stage: test
#   image: openjdk:17
#   script:
#     - cd Team_5_Phygital
#     - ./gradlew integrationTest
 
# code_quality:
#   stage: test
#   image: gradle:latest
#   script:
#     - cd Team_5_Phygital
#     # Install any required dependencies
#     - gradle wrapper --gradle-version=8.5
#     # Run code quality checks
#     - ./gradlew checkstyle pmd findbugs
#   artifacts:
#     reports:
#       codequality: build/reports/
 
# dependency_check:
#   stage: test
#   image: openjdk:17
#   script:
#     - cd Team_5_Phygital
#     - ./gradlew dependencyCheckAnalyze
 
 
deploy:
  image: google/cloud-sdk:latest
  stage: deploy
  before_script:
    - which nslookup || apt-get update -y && apt-get install dnsutils -y
    - "echo $(nslookup phygital-team5.duckdns.org | awk '/^Address: / { print $2 }') > ${HOME}/ip.txt"
    - IP_ADDRESS=$(cat ${HOME}/ip.txt)
    - if [ -z "$IP_ADDRESS" ]; then IP_ADDRESS="35.241.233.187"; fi
    - eval $(ssh-agent -s)
    - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config

  script:
    - echo "Downloading JAR file from Google Cloud Storage"
    - gsutil cp gs://jar-team-bucket/Team_5_Phygital-0.0.1-SNAPSHOT.jar /opt/Team_5_Phygital.jar
    - echo "Running the JAR file"
    - java -jar /opt/Team_5_Phygital.jar



destroy:
  image: google/cloud-sdk:latest
  stage: destroy
  before_script:
    # Set up SSH agent and other necessary configurations...
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config
  script:
    # Execute teardown commands to destroy deployed resources...
    - echo "Removing deployed JAR file"
    - ssh $TEAM5_USER@$IP_ADDRESS "rm /opt/Team_5_Phygital.jar"
    # Add any additional cleanup commands as needed
  when: manual

    