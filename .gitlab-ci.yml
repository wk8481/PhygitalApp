# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
include:
  - template: SAST.gitlab-ci.yml
 
stages:
  - build
  - test
  - deploy
  - destroy
 
image: openjdk:17-jdk-slim  # Use an OpenJDK 17 image
 
variables:
  DOCKER_HUB_REPO: "zamlamb/phygital"
 
build:
  image: docker:19.03
  stage: build
  services:
    - docker:dind
  script:
    # Build the Docker image
    - cd Team_5_Phygital
    - docker build -t my-phygital-boot-app .
    - docker tag my-phygital-boot-app:latest $DOCKER_HUB_REPO:latest
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_HUB_REPO:latest
 
unit-test-job:
   image: gradle:jdk17
   stage: test
   script:
     - cd Team_5_Phygital 
     - cd src/main/resources  # Navigate to the resources directory
     - ls -l                   # List files in the resources directory
     - cat application.properties  # Print out the contents of application.properties file
     - cd ../../..  # Navigate back to the project root directory
     - ./gradlew test --scan 
   artifacts:
    when: always
    reports:
      junit: build/test-results/test/TEST-*.xml
 
deploy:
  image: google/cloud-sdk:latest
  stage: deploy
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - which nslookup || apt-get install dnsutils -y
    - "echo $(nslookup phygital-team5.duckdns.org | awk '/^Address: / { print $2 }') > ${HOME}/ip.txt"
    - IP_ADDRESS=$(cat ${HOME}/ip.txt)
    - if [ -z "$IP_ADDRESS" ]; then IP_ADDRESS="35.241.233.187"; fi
    - eval $(ssh-agent -s)
    - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config

  script:
  - ssh $TEAM5_USER@$IP_ADDRESS "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io; docker system prune -a -f; docker pull $DOCKER_HUB_REPO:latest; docker container run -d --rm -p 443:8443 $DOCKER_HUB_REPO:latest; docker logout docker.io"


destroy:
  image: google/cloud-sdk:latest
  stage: destroy
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config
  script:
    - ssh $TEAM5_USER@$IP_ADDRESS "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io;  docker stop \$(docker ps -q); docker rm \$(docker ps -a -q); docker system prune -af"
  when: manual
