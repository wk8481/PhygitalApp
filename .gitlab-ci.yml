# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
 
image: openjdk:17-jdk-slim  # Use an OpenJDK 17 image
 
variables:
  # Define the services variables for both databases
  POSTGRES_DB_BUILD: 'postgres_phygital_db'
  POSTGRES_USER_BUILD: 'admin'
  POSTGRES_PASSWORD_BUILD: 'admin'
  POSTGRES_PORT_BUILD: '5433'

  POSTGRES_DB_TEST: 'phygital_test'
  POSTGRES_USER_TEST: 'admin'
  POSTGRES_PASSWORD_TEST: 'admin'
  POSTGRES_PORT_TEST: '5445'

build:
  image: docker:19.03
  stage: build
  services:
    - docker:dind
  script:
    # Build the Docker image
    - cd Team_5_Phygital
    - docker build -t my-phygital-boot-app .
    # Save the Docker image as an artifact
    - docker save my-phygital-boot-app > my-phygital-boot-app.tar
  artifacts:
    paths:
      - Team_5_Phygital/my-phygital-boot-app.tar



unit-test-job:
  image: gradle:jdk17
  stage: test
  services:
    - name: postgres:16.1-alpine
      alias: postgres_phygital_test_db
      command: ["postgres", "-c", "max_connections=200"]
  script:
    - cd Team_5_Phygital
    - ./gradlew test
  artifacts:
    when: always
    paths:
      - Team_5_Phygital/build/reports/tests/test/index.html



 


 
check-files-job:  # This job runs in the test stage.
   stage: test
   image: alpine:latest
   script:
      - mkdir checkdir
      - find -name *.c > checkdir/testresult.txt 2>/dev/null
   artifacts:
        paths:
          - ./checkdir
 
integration_test:
  stage: test
  image: openjdk:17
  script:
    - cd Team_5_Phygital
    - ./gradlew integrationTest
 
code_quality:
  stage: test
  image: gradle:latest
  script:
    - cd Team_5_Phygital
    # Install any required dependencies
    - gradle wrapper --gradle-version=8.5
    # Run code quality checks
    - ./gradlew checkstyle pmd findbugs
  artifacts:
    reports:
      codequality: build/reports/
 
dependency_check:
  stage: test
  image: openjdk:17
  script:
    - cd Team_5_Phygital
    - ./gradlew dependencyCheckAnalyze
 
deploy_to_cloud:  # This job runs in the deploy stage.
    stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
    image: google/cloud-sdk:alpine
    script:
        - echo "Deploying to gcloud..."