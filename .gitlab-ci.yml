image: larsdroid/jdk-gradle-node:21-8.7.0-20.12.1-alpine

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

include:
  - template: SAST.gitlab-ci.yml

stages:
  - build
  - test
  - deploy
  - destroy

# Cache configuration for dependencies
cache:
  paths:
    - .gradle/


build:
  stage: build
  image: gradle:jdk17
  script:
    - echo "JAVA_HOME is $JAVA_HOME"
    - java -version
    - echo "Build start..."
    - chmod +x ./gradlew
    - ./gradlew bootJar
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 hour



unit-test-job:
   image: gradle:jdk17
   stage: test
   script:
     - echo "Running JUnit tests"
     - chmod +x ./gradlew
     - ./gradlew test --scan
     - echo "SAST will run via the template"
   artifacts:
    reports:
      junit: build/test-results/**/*.xml

deploy:
  image: google/cloud-sdk:latest
  stage: deploy
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - which nslookup || apt-get install dnsutils -y
    - "echo $(nslookup phygital-team5.duckdns.org | awk '/^Address: / { print $2 }') > ${HOME}/ip.txt"
    - IP_ADDRESS=$(cat ${HOME}/ip.txt)
    - if [ -z "$IP_ADDRESS" ]; then IP_ADDRESS="35.241.233.187"; fi
    - eval $(ssh-agent -s)
    - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config

  script:
  - echo "Deploying the application..."
  - ssh $TEAM5_USER@$IP_ADDRESS "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io; docker pull $DOCKER_USERNAME/phygital-team5:latest; docker run -d -p 8080:8080 $DOCKER_USERNAME/phygital-team5:latest"
  when: manual


destroy:
  image: google/cloud-sdk:latest
  stage: destroy
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$TEAM5_PRIV_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking accept-new\n\n" > ~/.ssh/config
  script:
    - ssh $TEAM5_USER@$IP_ADDRESS "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io;  docker stop \$(docker ps -q); docker rm \$(docker ps -a -q); docker system prune -af"
  when: manual
