{"version":3,"file":"installation\\bundle-questionHandler.js","mappings":";;;;;;;;;;;;;;;AAAO;AACA;;;;;;;UCDP;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN6C;AAC7C;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE,KAAK;AACL;;AAEA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;;AAEA,gBAAgB,yBAAyB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iDAAM,GAAG,gDAAK;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,C","sources":["webpack://team-5-integration-4/./src/main/js/util/csrf.js","webpack://team-5-integration-4/webpack/bootstrap","webpack://team-5-integration-4/webpack/runtime/define property getters","webpack://team-5-integration-4/webpack/runtime/hasOwnProperty shorthand","webpack://team-5-integration-4/webpack/runtime/make namespace object","webpack://team-5-integration-4/./src/main/js/installation/questionHandler.js"],"sourcesContent":["export const header = document.querySelector('meta[name=\"_csrf_header\"]').content\nexport const token = document.querySelector('meta[name=\"_csrf\"]').content\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {header, token} from '../util/csrf.js'\nlet isCircular\n\nvar isCircularExists = document.getElementById('minUser')\n\nlet dataArray = []\n\nfunction parseContent() {\n    var content = document.querySelectorAll('#rangeContent p')\n\n    content.forEach(function(element) {\n        var numbers = element.innerText.split(' ')\n        var questionId = parseInt(numbers[0])\n        var answer = parseInt(numbers[1])\n        dataArray.push({ questionId: questionId, answer: answer })\n    })\n    const quotient = Math.floor(dataArray.length / 3)\n\n    for (let i = 0; i < quotient; i++) {\n        let id = dataArray[0].questionId\n        let min = dataArray[0].answer\n        let step = dataArray[1].answer\n        let max = dataArray[2].answer\n        dataArray.shift()\n        dataArray.shift()\n        dataArray.shift()\n\n        console.log('id min step max ', id, min, step, max)\n\n        updateSliders(id, min, step, max)\n    }\n\n    return dataArray\n}\n\nfunction updateSliders(questionId, min, step, max) {\n    var slider = document.getElementById('sliderQuestionId_' + questionId)\n    slider.min = min\n    slider.step = step\n    slider.max = max\n    slider.defaultValue = (max+min)/2\n}\n\nparseContent()\n\n\ndocument.getElementById('submit').style.visibility = 'hidden'\nlet currentIndex = 0\nif (isCircularExists !== null) {\n    isCircular = true\n    document.getElementById('minUser').addEventListener('click', minUser)\n    document.getElementById('plusUser').addEventListener('click', plusUser)\n    document.getElementById('nextButton').classList.remove('btn-secondary')\n    document.getElementById('nextButton').classList.add('btn-primary')\n} else {\n    isCircular = false\n}\n\ndocument.getElementById('submit').addEventListener('click', submitAnswer)\ndocument.getElementById('nextButton').addEventListener('click', moveToNextQuestion)\ndocument.getElementById('backButton').addEventListener('click', moveToPreviousQuestion)\ndocument.getElementById('pauseButton').addEventListener('click', togglePause)\nconst userCount = document.getElementById('userCount')\nlet queue = 0\n\nfunction minUser(){\n    if (queue>0){\n        queue--\n    }\n    userCount.innerText = 'There are/is ' + queue + ' people in the queue.'\n}\n\nfunction plusUser(){\n    if (queue < 15) {\n        queue++\n    }\n    userCount.innerHTML = 'There are/is ' + queue + ' people in the queue.'\n\n}\n\nvar elapsedTime =0\nvar seconds =0\nlet minSeconds = 0\n\n// Start time when the page loads\nvar startTime = new Date().getTime()\n\nfunction trackTime() {\n\n    // Function to calculate and display time spent\n\n    displayTime()\n    // Update time every second\n    timerInterval = setInterval(displayTime, 1000)\n}\n\n// Call trackTime() when the page loads\ntrackTime()\nfunction displayTime() {\n    var currentTime = new Date().getTime()\n    elapsedTime = currentTime - startTime\n    elapsedTime -= minSeconds\n    seconds = Math.floor(elapsedTime / 1000)\n    var minutes = Math.floor(seconds / 60)\n\n    var secondsTodisplay =  seconds % 60\n    // Display time on the page\n    document.getElementById('timer').innerHTML = 'Time spent on the page: ' + minutes + 'm ' + secondsTodisplay + 's'\n}\n\n\n// JavaScript to toggle between pause and resume states\nvar paused = false // Initially, page is not paused\nvar timerInterval\n// Function to toggle pause state and update button\nvar startPause\nfunction togglePause() {\n    paused = !paused // Toggle pause state\n\n    // Update button text and icon based on pause state\n    var button = document.getElementById('pauseButton')\n    const textArea = document.getElementById('notesField')\n    const form = document.getElementById('questionForm')\n\n    if (paused) {\n        // Page is paused\n        startPause = new Date().getTime()\n        button.innerHTML = ''\n        button.innerHTML = '<i class=\"fas fa-play\"></i>'\n        document.getElementById('blockedOverlay').style.display = 'block' // Display the overlay\n        form.style.display = 'none'\n        textArea.style.display = 'block'\n        clearInterval(timerInterval)\n    } else {\n        // Page is resumed\n        var endPause = new Date().getTime()\n        button.innerHTML = ''\n        button.innerHTML = '<i class=\"fas fa-pause\"></i>'\n        document.getElementById('blockedOverlay').style.display = 'none' // Dont display the overlay\n        minSeconds = endPause - startPause + minSeconds\n        form.style.display = 'block'\n        textArea.style.display = 'none'\n\n        timerInterval = setInterval(displayTime, 1000)\n    }\n\n    // Perform other actions related to pausing or resuming the page\n    // For example, you can pause or resume certain functionality here\n}\n\n\n\nvar questionDivs = document.querySelectorAll('div[id*=question]')\n\nfor (let i = 0; i < questionDivs.length; i++) {\n    let questionNr = document.getElementById('question'+i)\n    let questionId = questionNr.querySelector('h2').id.split('_')[1]\n    // Determine answer based on question type\n\n}\nwindow.onload = function () {\n    questionDivs.forEach(function(div) {\n        // Check if the div's ID is \"question0\"\n        if (div.id === 'question0') {\n            // If it is, show the div\n            div.style.display = 'block'\n        } else if (div.id.includes('question')) {\n            // If not, hide the div\n            div.style.display = 'none'\n        }\n    })\n    document.getElementById('none').style.display = 'none'\n}\n\n\n\n// Function to handle submitting answers\nfunction submitAnswer(event) {\n    if (event != null) {\n        event.preventDefault()\n    }\n\n    let answers = ''\n    let questions = ''\n\n    if (!isCircular) {\n        for (let i = 0; i < questionDivs.length; i++) {\n            let answer\n            let question = document.getElementById('question_' + i).textContent\n            let questionNr = document.getElementById('question' + i)\n            let questionId = questionNr.querySelector('h2').id.split('_')[1]\n\n            let answerName = 'answer' + i\n            switch (questionNr.querySelector('div').querySelector('div').id) {\n                case 'open':\n                    answer = document.getElementById(answerName).value\n                    break\n                case 'multipleChoice':\n                    answer = ''\n                    const inputs = document.querySelectorAll('input[name=\"' + answerName + '\"]')\n\n                    inputs.forEach(input => {\n                        if (input.checked) {\n                            answer += input.value + ', '\n                        }\n                    })\n\n                    // Remove the trailing comma and space\n                    if (answer.endsWith(', ')) {\n                        answer = answer.slice(0, -2)\n                    }\n                    break\n                case 'range':\n                    answer = document.getElementById(answerName).value\n                    break\n                case 'singleChoice':\n\n                    answer = document.querySelector('input[name=' + answerName + ']:checked').value\n                    break\n            }\n\n            answers += answer\n            answers += ' | '\n            questions += questionId\n            questions += ' | '\n        }\n    } else {\n        let answer\n        let question = document.getElementById('question_' + currentIndex).textContent\n        let questionNr = document.getElementById('question' + currentIndex)\n        let questionId = questionNr.querySelector('h2').id.split('_')[1]\n\n        let answerName = 'answer' + currentIndex\n        console.log(answerName)\n        switch (questionNr.querySelector('div').querySelector('div').id) {\n            case 'open':\n                answer = document.getElementById(answerName).value\n                break\n            case 'multipleChoice':\n                answer = ''\n                const s = document.querySelectorAll('input[name=' + answerName + ']:checked')\n                for (let sElement of s) {\n                    answer += sElement.value\n                    answer += ', '\n                }\n\n                answer = answer.slice(0, -2) // Delete last two characters\n                break\n            case 'range':\n                answer = document.getElementsByName(answerName).item(0).value\n                break\n            case 'singleChoice':\n                answer = document.querySelector('input[name=' + answerName + ']:checked').value\n                break\n        }\n\n        answers += answer\n        answers += ' | '\n        questions += questionId\n        questions += ' | '\n    }\n\n    const user = document.getElementById('userMail').textContent\n\n    const textArea = document.getElementById('notesField')\n    var urlParams = new URLSearchParams(window.location.search)\n\n    answers = answers.slice(0, -1) // Delete last character\n    questions = questions.slice(0, -1) // Delete last character\n    document.getElementById('questionForm').reset()\n    // Get the value of the \"subThemeId\" parameter\n    var subtheme = urlParams.get('subThemeId')\n    fetch('/api/questions/submit', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            [header]: token\n        },\n        body: JSON.stringify({\n            question: questions,\n            answer: answers,\n            userMail: user,\n            subThemeId: subtheme,\n            durationSpend: seconds,\n            note: textArea.value\n        })\n    })\n        .then(response => {\n            if (response.ok) {\n                console.log('Answer submitted successfully.')\n                if (!isCircular) {\n                    window.location.href = '/installation/flowCompleted'\n                }\n            } else {\n                console.error('Failed to submit answer.')\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error)\n        })\n}\n\n\nfunction moveToNextQuestion() {\n    if (isCircular) {\n        submitAnswer()\n    }\n    if (queue === 0){\n        if (currentIndex < questionDivs.length - 1) {\n            currentIndex++\n            showQuestion(currentIndex)\n\n        } else {\n            if (isCircular) {\n                currentIndex = 0\n                showQuestion(currentIndex)\n            }\n        }\n    } else {\n        minUser()\n    }\n\n    if (!isCircular && currentIndex === questionDivs.length-1){\n        document.getElementById('submit').style.visibility = 'visible'\n\n    }\n}\n\nfunction moveToPreviousQuestion() {\n    if(!isCircular) {\n        document.getElementById('submit').style.visibility = 'hidden'\n    }\n    if (currentIndex > 0) {\n        currentIndex--\n        showQuestion(currentIndex)\n    }\n}\n\n\n\nfunction showQuestion(index) {\n\n    for (var i = 0; i < questionDivs.length; i++) {\n        questionDivs[i].style.display = 'none'\n    }\n    questionDivs[index].style.display = 'block'\n}\n\n// Range slider change event listener for all range inputs\nlet rangeInputs = document.getElementsByClassName('range')\n\nArray.from(rangeInputs).forEach(function(rangeInput) {\n    let rangeValue = rangeInput.nextElementSibling\n    rangeValue = rangeValue.nextElementSibling\n    rangeInput.addEventListener('input', function() {\n        if (rangeValue != null) {\n            rangeValue.textContent = 'Value: ' + rangeInput.value\n        }\n    })\n})"],"names":[],"sourceRoot":""}