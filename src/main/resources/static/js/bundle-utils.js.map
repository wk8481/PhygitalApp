{"version":3,"file":"bundle-utils.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://team-5-integration-4/webpack/bootstrap","webpack://team-5-integration-4/webpack/runtime/define property getters","webpack://team-5-integration-4/webpack/runtime/hasOwnProperty shorthand","webpack://team-5-integration-4/webpack/runtime/make namespace object","webpack://team-5-integration-4/./src/main/js/utils.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export function extractIdsFromUrl(url, partOfUrl) {\r\n    // Used to extract the 2 id's that are in the link, needed to update entity\r\n\r\n    // Define the regular expression pattern to match IDs\r\n    const pattern = new RegExp(\"/(\\\\d+)/\" + partOfUrl + \"/(\\\\d+)\");\r\n\r\n    // Execute the regular expression on the URL\r\n    const match = url.match(pattern);\r\n\r\n    // If match is found, extract the IDs\r\n    if (match) {\r\n        const firstId = match[1];\r\n        const secondId = match[2];\r\n        return [firstId, secondId];\r\n    } else {\r\n        const pattern2 = new RegExp(\"/(\\\\d+)/\" + partOfUrl + \"/new\");\r\n        const match2 = url.match(pattern2);\r\n        if (match2){\r\n            return match2[1]\r\n        }\r\n        // Return null or handle error\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}