{"version":3,"file":"admin\\bundle-question.js","mappings":";;;;;;;;;;;;;;;AAAO;AACA;;;;;;;;;;;;;;;ACDA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;;;;;;UCrBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN8C;AACE,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA,+EAA+E,iDAAM,GAAG,gDAAK;AAC7F,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA,aAAa,iDAAM,GAAG,gDAAK;AAC3B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://team-5-integration-4/./src/main/js/util/csrf.js","webpack://team-5-integration-4/./src/main/js/utils.js","webpack://team-5-integration-4/webpack/bootstrap","webpack://team-5-integration-4/webpack/runtime/define property getters","webpack://team-5-integration-4/webpack/runtime/hasOwnProperty shorthand","webpack://team-5-integration-4/webpack/runtime/make namespace object","webpack://team-5-integration-4/./src/main/js/admin/question.js"],"sourcesContent":["export const header = document.querySelector('meta[name=\"_csrf_header\"]').content;\r\nexport const token = document.querySelector('meta[name=\"_csrf\"]').content;\r\n","export function extractIdsFromUrl(url, partOfUrl) {\r\n    // Used to extract the 2 id's that are in the link, needed to update entity\r\n\r\n    // Define the regular expression pattern to match IDs\r\n    const mainPattern = new RegExp(\"/(\\\\d+)/\" + partOfUrl + \"/(\\\\d+)\");\r\n    const creatingPattern = new RegExp(\"/(\\\\d+)/\" + partOfUrl + \"/new\");\r\n    const specialPattern = new RegExp(\"/\" + partOfUrl + \"/(\\\\d+)\");\r\n    let match\r\n\r\n    // If match is found, extract the IDs\r\n    if ((match = url.match(mainPattern)) !== null) {\r\n        const firstId = match[1];\r\n        const secondId = match[2];\r\n        return [firstId, secondId];\r\n    } else if ((match = url.match(creatingPattern)) !== null) {\r\n        return match[1]\r\n    } else if ((match = url.match(specialPattern)) !== null) {\r\n        return match[1]\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {header, token} from \"../util/csrf.js\";\r\nimport { extractIdsFromUrl } from '../utils.js'; // Adjust the path as per your file structure\r\n\r\n\r\n\r\ndocument.getElementById(\"addButton\").addEventListener(\"click\", addAnswerField);\r\ndocument.getElementById(\"removeButton\").addEventListener(\"click\", removeAnswerField);\r\n\r\nconst saveButton = document.querySelector(\"#saveButton\");\r\nconst deleteButton = document.querySelector(\"#deleteButton\");\r\nconst [subThemeId, questionId] = extractIdsFromUrl(window.location.href.substring(window.location.href), \"question\");\r\n\r\nsaveButton.addEventListener(\"click\", updateQuestion);\r\ndeleteButton.addEventListener(\"click\", deleteQuestion);\r\n\r\ndocument.getElementById(\"addButton\").addEventListener(\"click\", addAnswerField);\r\ndocument.getElementById(\"removeButton\").addEventListener(\"click\", removeAnswerField);\r\ndocument.getElementById(\"questionTypeInput\").addEventListener(\"change\", changeButtonVisability)\r\n\r\n\r\nlet fields = document.getElementsByClassName(\"answer-input\")\r\n\r\nlet addButton = document.getElementById(\"addButton\");\r\nlet minusButton = document.getElementById(\"removeButton\");\r\nchangeButtonVisability();\r\n\r\nfunction changeButtonVisability(){\r\n\r\n    let questionType = document.getElementById(\"questionTypeInput\").value;\r\n    if (questionType === \"MULTIPLE_CHOICE\" || questionType === \"SINGLE_CHOICE\") {\r\n        addButton.style.visibility = \"visible\"\r\n        minusButton.style.visibility = \"visible\"\r\n        for (let i = 0; i < fields.length-2; i++) {\r\n            let answerField = fields[i];\r\n            if (answerField.style.visibility !== \"visible\") {\r\n                answerField.style.visibility = \"visible\";\r\n            }\r\n        }\r\n    } else{\r\n        addButton.style.visibility = \"hidden\"\r\n        minusButton.style.visibility = \"hidden\"\r\n        for (let field of fields) {\r\n            field.style.visibility = \"hidden\"\r\n        }\r\n    }\r\n}\r\nasync function updateQuestion(event) {\r\n    let answer = []\r\n\r\n    const questionType = document.getElementById(\"questionTypeInput\").value;\r\n    if (questionType === \"MULTIPLE_CHOICE\" || questionType === \"SINGLE_CHOICE\") {\r\n        let visibleCount = 0;\r\n        for (let field of fields) {\r\n            if (field.style.visibility === \"visible\") {\r\n                answer.push(field.value)\r\n                visibleCount++;\r\n            }\r\n        }\r\n    }\r\n    if (answer.length == null){\r\n        answer = 0;\r\n    }\r\n    const question = document.getElementById(\"textInput\").value;\r\n    console.log(\"Updating question\")\r\n    fetch(`/api/questions/${questionId}`, {\r\n        method: \"PATCH\", headers: {\r\n            \"Accept\": \"application/json\", \"Content-Type\": \"application/json\", [header]: token\r\n        }, body: JSON.stringify({\r\n            \"id\": questionId,\r\n            \"text\": question,\r\n            \"type\": questionType,\r\n            \"answers\": answer\r\n        })\r\n    })\r\n        .then(response => {\r\n            if (response.status === 204) {\r\n                location\r\n            }\r\n        });\r\n}\r\n\r\nasync function deleteQuestion(event) {\r\n    console.log(\"Deleting question\")\r\n    const response = await fetch(`/api/questions/${questionId}`, {\r\n        method: \"DELETE\", headers: {\r\n            [header]: token\r\n        }\r\n    });\r\n    if (response.ok){\r\n        window.history.back();\r\n    }\r\n}\r\n\r\n\r\nfunction addAnswerField(){\r\n\r\n    for (let field of fields) {\r\n        if (field.style.visibility !== \"visible\"){\r\n            console.log(\"showing 1 more\")\r\n            field.style.visibility = \"visible\"\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeAnswerField(){\r\n    let visibleCount = 0;\r\n    for (let field of fields) {\r\n        if (field.style.visibility === \"visible\") {\r\n            visibleCount++;\r\n        }\r\n    }\r\n\r\n    if (visibleCount > 2) {\r\n        for (let i = fields.length - 1; i >= 0; i--) {\r\n            let field = fields[i];\r\n            if (field.style.visibility === \"visible\") {\r\n                console.log(\"Showing 1 less\")\r\n                field.style.visibility = \"hidden\";\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":[],"sourceRoot":""}