{"version":3,"file":"admin\\bundle-add-question.js","mappings":";;;;;;;;;;;;;;;AAAO;AACA;;;;;;;;;;;;;;;ACDA;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;;;;;;UCrBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6C;AACE;;;;AAI/C;AACA,mBAAmB,4DAAiB;AACpC;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA,UAAU;AACV,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iDAAM,GAAG,gDAAK;AAC7F,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://team-5-integration-4/./src/main/js/util/csrf.js","webpack://team-5-integration-4/./src/main/js/utils.js","webpack://team-5-integration-4/webpack/bootstrap","webpack://team-5-integration-4/webpack/runtime/define property getters","webpack://team-5-integration-4/webpack/runtime/hasOwnProperty shorthand","webpack://team-5-integration-4/webpack/runtime/make namespace object","webpack://team-5-integration-4/./src/main/js/admin/add-question.js"],"sourcesContent":["export const header = document.querySelector('meta[name=\"_csrf_header\"]').content\nexport const token = document.querySelector('meta[name=\"_csrf\"]').content\n","export function extractIdsFromUrl(url, partOfUrl) {\n    // Used to extract the 2 id's that are in the link, needed to update entity\n\n    // Define the regular expression pattern to match IDs\n    const mainPattern = new RegExp('/(\\\\d+)/' + partOfUrl + '/(\\\\d+)')\n    const creatingPattern = new RegExp('/(\\\\d+)/' + partOfUrl + '/new')\n    const specialPattern = new RegExp('/' + partOfUrl + '/(\\\\d+)')\n    let match\n\n    // If match is found, extract the IDs\n    if ((match = url.match(mainPattern)) !== null) {\n        const firstId = match[1]\n        const secondId = match[2]\n        return [firstId, secondId]\n    } else if ((match = url.match(creatingPattern)) !== null) {\n        return match[1]\n    } else if ((match = url.match(specialPattern)) !== null) {\n        return match[1]\n    } else {\n        return null\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {header, token} from '../util/csrf.js'\nimport { extractIdsFromUrl } from '../utils.js' // Adjust the path as per your file structure\n\n\n\nconst createButton = document.getElementById('createButton')\nconst subThemeId = extractIdsFromUrl(window.location.href.substring(window.location.href), 'question')\ncreateButton.addEventListener('click', addNewQuestion)\ndocument.getElementById('addButton').addEventListener('click', addAnswerField)\ndocument.getElementById('removeButton').addEventListener('click', removeAnswerField)\ndocument.getElementById('questionTypeInput').addEventListener('change', changeButtonVisability)\n\n\nlet fields = document.getElementsByClassName('answer-input')\nlet rangeFields = document.getElementsByClassName('range')\n\nlet addButton = document.getElementById('addButton')\nlet minusButton = document.getElementById('removeButton')\nfunction changeButtonVisability(){\n\n    let questionType = document.getElementById('questionTypeInput').value\n    if (questionType === 'MULTIPLE_CHOICE' || questionType === 'SINGLE_CHOICE') {\n\n        addButton.style.visibility = 'visible'\n        minusButton.style.visibility = 'visible'\n        for (let i = 0; i < fields.length-2; i++) {\n            let answerField = fields[i]\n            if (answerField.style.visibility !== 'visible') {\n                answerField.style.visibility = 'visible'\n            }\n        }\n        for (let i = 0; i < rangeFields.length; i++) {\n            rangeFields[i].style.visibility = 'hidden'\n        }\n    } else{\n        addButton.style.visibility = 'hidden'\n        minusButton.style.visibility = 'hidden'\n        for (let field of fields) {\n            field.style.visibility = 'hidden'\n        }\n        if (questionType === 'RANGE'){\n            for (let i = 0; i < rangeFields.length; i++) {\n                rangeFields[i].style.visibility = 'visible'\n            }\n        } else {\n            for (let i = 0; i < rangeFields.length; i++) {\n                rangeFields[i].style.visibility = 'hidden'\n            }\n        }\n    }\n}\n\n\nfunction addAnswerField(){\n\n    for (let field of fields) {\n        if (field.style.visibility !== 'visible'){\n            field.style.visibility = 'visible'\n            break\n        }\n    }\n}\n\nfunction removeAnswerField(){\n    let visibleCount = 0\n    for (let field of fields) {\n        if (field.style.visibility === 'visible') {\n            visibleCount++\n        }\n    }\n\n    if (visibleCount > 2) {\n        for (let i = fields.length - 1; i >= 0; i--) {\n            let field = fields[i]\n            if (field.style.visibility === 'visible') {\n                field.style.visibility = 'hidden'\n                break\n            }\n        }\n    }\n}\nasync function addNewQuestion() {\n    let rangeFields = document.getElementsByClassName('range')\n\n    fields = document.getElementsByClassName('answer-input')\n    let questionType = document.getElementById('questionTypeInput').value\n    let answer = []\n    if (questionType === 'MULTIPLE_CHOICE' || questionType === 'SINGLE_CHOICE' || questionType === 'RANGE') {\n        let visibleCount = 0\n        for (let field of fields) {\n            if (field.style.visibility === 'visible') {\n                if (questionType === 'RANGE'){\n                    if (parseInt(rangeFields[0].value) < parseInt(rangeFields[2].value) && parseInt(rangeFields[1].value) < parseInt(rangeFields[2].value)){\n                        answer.push(field.value)\n                        visibleCount++\n                    } else if (parseInt(rangeFields[0].value) > parseInt(rangeFields[2].value) ){\n                        alert('Check the red field ( ' +rangeFields[0].placeholder +' ) for mistakes, minimum value should be less than maximum')\n                        rangeFields[0].style.borderColor = 'red'\n                        rangeFields[2].style.borderColor = 'red'\n                        return\n                    } else if(parseInt(rangeFields[1].value) > parseInt(rangeFields[2].value)){\n                        alert('Check the red field ( ' +rangeFields[1].placeholder +' ) for mistakes, step value should be less than maximum')\n                        rangeFields[1].style.borderColor = 'red'\n                        rangeFields[2].style.borderColor = 'red'\n                        return\n                    }\n                }else {\n                    answer.push(field.value)\n                    visibleCount++\n                }\n            }\n        }\n    }\n    if (answer.length == null){\n        answer = 0\n    }\n    const textInput = document.getElementById('textInput').value\n    const type = document.getElementById('questionTypeInput').value\n    await fetch('/api/questions', {\n        method: 'POST', headers: {\n            'Accept': 'application/json', 'Content-Type': 'application/json', [header]: token\n        }, body: JSON.stringify({\n            text: textInput,\n            type: type,\n            subThemeId: subThemeId,\n            answers: answer\n        })\n    }).then(response => {\n        if (response.status === 201) {\n            window.history.back()\n        }\n    })\n}\n"],"names":[],"sourceRoot":""}